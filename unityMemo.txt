最初のブレークポイントが置けるようになるまで

①VisualStudioInstollerでUnityのツールが
　入っているか確認する

②Edit>Preferences>Generalの、
　Code Optimization On SetUpの項目が
　Debugになっているか確認する

③Edit>Preferences>External Toolsの、
　External Script EditorにVisualStudioのやつが
　設定されているか確認する

④VisualStudio側で、
　デバッグ>Unityデバッガーのアタッチを押して、
　出てくるかを確認して押下する

この4つでだいたいおわるはず

------------------------------------------------
<Animationの切替>
[Wait->Run]
isRunのフラグがtrueのとき、とする
[Run->Wait]
isRunのフラグがfalseのとき、とする

<お目目をぱちくりさせる方法>
Unityちゃんに、AutoBlinkforSD.csをアタッチする
引数の、Ref_faceという場所には「_face」を入れる

アニメーションで参考にしたサイト↓---------------

FaceUpdate.csの、「Invalid Layer Index」の警告についての対処法
https://thinkit.co.jp/story/2014/11/06/5372?page=0%2C1

コライダーの大きさと、キャラクターコントローラーを使った移動制御について
https://goodlucknetlife.com/unity-how-to-charactorcontroller/

特に、アニメーションの切替方法について
https://www.eda-inc.jp/unitychan/

------------------------------------------------

<五芒星のイラスト>
https://www.ac-illust.com/main/detail.php?id=1890670&word=%E4%BA%94%E8%8A%92%E6%98%9F%E9%AD%94%E6%B3%95%E9%99%A3#
※イラストACから拝借


<キャラの方向転換について>
参照したもの↓
https://www.hanachiru-blog.com/entry/2019/02/20/183552

transform.rotation = Quaternion.LookRotation(movedir);
と書くことで、ボタン押下時にmovedirに値が入るから
移動させたい方向というのが決められる

<他のモーションアセットを、unityちゃんにつける>
参照したもの↓
https://unity-shoshinsha.biz/archives/987

https://obenkyolab.com/?p=2112

AnimaterにしっかりStateを追加して設定すれば
動いてくれました。
※Has Exit Timeにチェックを付ける/付けないは
ちゃんと考えたほうがいい
(例)Wait->Attackについては、
Waitのアニメーションが終わってからAttackに移動するとボタン押下時に即座に反応してくれないと困るから、チェックは外して合ったほうがいい
逆に、Attack->Waitは、
Attackのアニメーションが最後まで再生されてから
Waitに戻ってほしいので、チェックがついていたほうがいい

<Unityちゃんに武器をもたせる>-------------------
参照したもの↓
https://unity-shoshinsha.biz/archives/987

武器アセットをいれて、上記のサイト通りに右手の子供として設定。そのあとにCharacter1_RightHandのTransform値を武器にコピペしたらいけそう
後はちょっとした座標調整と、サイズの変更

武器の    X      Y     Z
Position 0.06  -0.2   0.04
Rotation -10    0     180
Scale    0.5    0.5   0.5

-----------------------------------------------

<武器を振るモーションの後>----------------------
少しずつ座標がずれているから、ずれないようにしないといけない

参照したもの↓
https://indie-du.com/entry/2016/05/14/095612

UnityちゃんについてるAnimatorのApplyRootMotionのチェックをはずしたら座標がずれなくなった

ただそうすると、床をすり抜けて落下していくようになった。UnityちゃんにつけてるRigidBodyのUseGravityのチェックをはずしたら落下はしなくなったけど、根本的な解決にはなってなさそう。。。

<CharactorControllを使わないでキャラ操作>
参照したもの↓
https://gametukurikata.com/program/rigidbodyandcollider

CharactorControllをRemoveして、
RigidBodyとCapsuleColliderをつける。
値は上記のサイトをマネする。

一部違う所だけ抜粋↓
CapsuleColliderのCenterは、
(X)0,(Y)0.5,(Z)0にする
Radiusは0.5で、Heightは1にする

以上で、UseGravityを入れてもすり抜けないし、
コライダー同士で接触しておかしくなることもない。

-----------------------------------------------

<Apply Root Motionについての追加知識>-----------
参照したもの↓
https://light11.hatenadiary.com/entry/2019/04/18/003100

特定のMotionのみチェックを外した状態にする。
ということも可能らしい。

------------------------------------------------

<MainCameraをUnityちゃんに追従させる>-----------
参照したもの↓
https://xr-hub.com/archives/7057
なぜか、MainCameraをunityちゃんの子オブジェクトに
する方法は全部失敗した。
CameraSample.scの方法でやった
-----------------------------------------------

<MainCameraとButtleCameraを切り替える>----------
参照したもの↓
https://xr-hub.com/archives/6038
この記事の中では、MainとSubで切替の説明をしている

MainCameraの文字のMainとCameraの間に空白があるのを消したほうがバグを生まないですむ。

CameraControllerという空のオブジェクトを用意しておいて、そこに新規Scriptで[CameraMng]をつくって
アタッチするようにしたらいい。
[CameraMng]の内容は上記のURLに記載されている。

制作するゲームはランダムな値でエンカウントして、
エンカウントしたらカメラを切り替わるようにしたい
------------------------------------------------

<MainCameraにはUnityちゃんの武器を映さない>------
まず、新規で[Weapon]というLayerを追加する。
次にUnityちゃんの右手の子供にした[Staff]のLayerに
[Weapon]を設定する。

MainCameraのインスペクター内にCameraがあって
そこにCullingMaskがある。
最初の設定では[Everything]になって全てのレイヤーを映すようにしているが、ここから[Weapon]を除外。
その結果、MainCamera上には映らなくなる。

ButtleCameraは[Everything]のままなので武器も映る

※ついでに書いとくと、unityちゃんは、武器以外
　[Player]というLayerを新規で用意して付けている
------------------------------------------------

<Unityちゃんの通常モードと戦闘モードを分ける>----
新規でButtleUnitychanControllerを作成し、
ButtleCameraがONのときのみUpdate処理を続行し、
SPACEキーを押下すると杖を振るモーションを行う。

ButtleUnitychanControllerはUnityちゃんにアタッチした。

ついでに、バトルカメラもunityちゃんに追従するようにButtleCameraにもCameraSample.csをアタッチした

他キャラと一緒に戦う仕組みならunityちゃん専用の攻撃Scriptではなく、ちゃんと親をつくって、
ポリモーフィズムにしたほうがいい。
汎用性を高めること！

(例)攻撃ボタンを押す(親クラス)→敵選択(親クラス)→攻撃モーションとダメージ計算をする(子クラス)

いまのうちからキャラを複製して検証したほうがいい
------------------------------------------------

<ButtleMngで全てのキャラのアクションを操作する>--
キャラ1体1体にButtleUnitychanControllerをつけるのは馬鹿だな。と思ったので、修正。

ヒエラルキーに空のオブジェクトをつくって、
ButtleMngと命名。同じくScriptを新規作成して、
そちらにもButtleMng.csと命名。新規Scriptを空のオブジェクトにアタッチする。

使用するにあたって、CharListにキャラオブジェクトを登録する必要がある。Script内にキャラ名のenumが
あるため、それと同じ順番でキャラオブジェクトをアタッチしないといけない。

それを利用してcharMap_を作成。
charMapは、キーをenum,値をキャラオブジェクトにしている。
foreachで回して、構造体に登録していく方針にした。

構造体を使うことで、キャラ1体1体の情報を差別化できる。

攻撃モーションの途中で、次のキャラの操作に移行してしまい。モーションが途切れるバグがあったため、

構造体にisMoveとanimTimeを追加して、モーションに
間をつくるようにした。
ただし、Scriptにも記載しているが、キャラによってモーションの間を調整する必要があるかもしれない。
その場合は、maxAnimTime等を外部データからもってこれるようにしたほうが効果的だと思う。

以上の実装方法により、キャラクター毎にコントローラースクリプトを用意する必要がなくなった。

------------------------------------------------



これより下は、0831パッケージに入っていない所。

<バトルUIの回転するUIの作り方>------------------
参照したもの↓
https://scrapbox.io/remi-tech/Unity%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A7%92%E5%BA%A6%E3%81%BE%E3%81%A7%E5%9B%9E%E3%81%97%E3%81%A6%E6%AD%A2%E3%82%81%E3%82%8B%E6%96%B9%E6%B3%95

まず、ButtleCanvasをヒエラルキーに作成して、
中にImageを追加する。UIにしたい画像のTexture Type
をSprite(2D and UI)にしてから、Imageにアタッチ

Imageには新規ScriptでImageRotate.csを作成して、
アタッチする。
このスクリプト内で回転処理を行っていく。

回転処理については上記の参照サイトと全く同じ。

①キー入力によって回転させたい角度を決める
②①をクォータニオンに直す
③画像の現在のクォータニオンを調べる
④Quaternion.Angleという関数を使い、②と③の角度
　の差を求める
⑤④の差が一定値以下なら回転終了し、
　規定値を満たしていなかったら回転を続行する。

まだActiveの切替とかしてないからバトル中以外でも
出てきちゃうけど、明日からまた修正頑張ろう。

FieldMngをつくって、戦闘と通常を切り替えられるようにします。
CameraMngでAキー操作でカメラ切替にしているところ
から修正を始めよう
enumつくって参照できるようにしてあげれば大丈夫。

-----------------------------------------------

<FieldMngでMODEの管理をする>--------------------
MODEというのは、探索モード/戦闘モード/メニュー
とかの、フィールド上で遷移するもの。

今は、時間経過で戦闘モードになるようにしてテスト
している。

空のオブジェクトを作成して、FieldMngと命名。
それに新規Scriptをアタッチして、その名前も
FieldMng.scにした。

FieldMng.sc内ではさっき書いた通り、時間経過で遷移するようにswitch文を書いている。

MODEが切り替わる事でCameraMng内のカメラ切替や、
ButtleMng内の攻撃モーション操作ができるようにならないといけないから、static変数でnowModeをつくり、
どのクラスからでもFieldMng.nowModeで現在の状態を
見れるようにした。

また、ButtleUICanvasについては、ButtleMngで
表示/非表示を管理するために、ButtleMng.scにpublic変数を追加して、アタッチできる場所を用意した。
missingに注意すること！！

これからも「複数クラスからの参照」があり、
「唯一の変数」で良いならstaticにしたほうがいい。
情報も持ち越せるだろうしね。

------------------------------------------------

<MODEがButtleなら、UnitychanControllerをoffに>--

UnitychanController.scに、MODEがSEARCHなら動く
ようにしたらいいね。それ以外ならreturnさせれば早い。

MODEが切り替わる時に走っていると、走りモーション
が終わらなくなる為、returnの前に、is_Runをfaseに
する処理を入れておく。

町の中でもSEARCHにしておけばいいかな？

------------------------------------------------

<戦闘用ワープポイント>--------------------------
実際のゲームフィールドでは、ひらけた空間を1ヶ所は
用意しておき、そこに戦闘では一時的にワープさせる
→ゲームフィールド毎に、戦闘用ポイントを設置する

あとはモードが切り替わったときにキャラの向きと位置の所定位置をきめとく。

ButtleMngでキャラを取得してるから、場所と向きを
予め設定できる何かを用意しておく。

<テストでポイントを作ってみる>
以下、バトルワープポイントのことをBWPと記載する。

キャラが2体なので、2つ設置する必要がある。
まず、BWPをまとめる空のオブジェクトを作成して、
ButtleWarpPointPackと命名。(座標0,0,0にする)
その後、それの子供に2つCubeで、BWP0,BWP1を作成。
(必要がない、BoxColliderをremoveしておく。)

ButtleMng.csにバトルワープポイントの取得を書く。
そのために、public変数で、BWPPackをアタッチできる所をつくる。
マップ毎にSceneを分けるのであれば、この方法で問題ない…はず。

BWPPackの子の座標をStart関数内で別の変数に保存する。
戦闘モードに切り替わるときに、その座標をキャラに入れてあげたらよい。
キャラの向きは、実際のマップをつくってみないとわからないが、全て進行方向を、統一する必要がある。

メモリーリークを防ぐ書き方の参考↓
https://madnesslabo.net/utage/?page_id=11109#i-17

基本的に、Sceneを丸ごと削除したらメモリーリークの
発生は起きにくい。(削除＝アンロード)
ただ、Sceneを跨いでも残る情報(シングルトンとかMng系の何か)とかがあると、
参照次第ではメモリーリークになるかもしれないからDestroyのあとにnullを代入する注意が必要。

------------------------------------------------

<戦闘用ワープポイントでのキャラの向き>-----------

戦闘用UIの回転方法と類似している。はず。
①buttleWarpPointsRotate_という配列変数を用意する
②buttleWarpPointsPos_と同じタイミングでStart関数でワープポイントの回転角をクォータニオンで取得
③戦闘モードになったとき、キャラクターの回転角に
②のクォータニオンを代入するだけ。

BWPの箱を回転させれば、その向きにキャラも変更できるはず。できました。
------------------------------------------------


Uniちゃんの家に関するScene

<家の周りを作成する>----------------------------
新規でテラインを作成し、Assets-Town-Terrainの
フォルダに[UniHouseData]として保存する。

地面に模様と色を付ける際は
Terrainの[AddLayer]でAssets-Town-Terrainにある
NewLayerを使用する
※CreateLayerは基本しなくてよさそう

<家の配置>
BakerHouseから持ってきてUnPackし、
[UniHouse]と名前を付ける
Pos    X:17.5 Y:0 Z:25
Rotate X:-90  Y:0 Z:0

家のテクスチャのMaxSize[128]

<MainCameraの位置>
Pos    X:6  Y:20 Z:7.5
Rotate X:55 Y:65 Z:0

SceneMngを配置し、
UniとDemoを引数にアタッチする・
※Uniはサイズを2倍にする

WarpOutとLocationSelCanvasを設置

また、新規の空のオブジェクトで
[UniHouseMng]を作成し、[UniHouseMng.cs]を
作ってアタッチする。

UniHouseMng.csには
void Start()
{
    // 現在のシーンをTOWNとする
    SceneMng.SetNowScene(SceneMng.SCENE.UNIHOUSE);
}

をいれる。

------------------------------------------------

<ユニちゃんが自分の家と当たり判定したとき、
 ユニちゃん家の室内にカメラを切り替える>---------

SubCameraとCameraControllerを作成する
CameraControllerにMainとSubをアタッチしておく。

[SubCamera]
Pos X:100 Y:0 Z:0
※AudioLisenerはRemoveしておく

<当たり判定ボックスの作成>
UniHouseにBoxColliderを付ける
Center X:2.3 Y:0  Z:4.5
Size   X:10  Y:10 Z:10
IsTriggerのチェック なし

家に新規ScriptでInHouseCheck.csを作成して
アタッチする。
※このスクリプトは他の家にも付けれる汎用性の
　あるものにする

<InHouseCheck.cs>
コライダーでの当たり判定を行う。
※UniのTagが[Player]になっているか確認しておく

void OnCollisionEnter(Collision collision)
{
    if(collision.transform.tag == "Player")
    {
　　　cameraMng_.SetChangeCamera(true);
      Debug.Log("当たった!");
    }
}

Collisionでの当たり判定では、CompareTagでの
タグ確認ができなかったので、仕方なく == で
判定を取っている。
※CameraMngの取得方法はFieldMng.csと同じ

------------------------------------------------

<室内オブジェクトのSetActive切替テスト>----------
次に、InHouseCheck.cs自身がどの家に
アタッチされているかを取得できるようにする。
→室内オブジェクトのSetActiveの切替に使えるように

※SetActive側は、オブジェクトの親名をそれぞれの
　家と同じ名前にしないといけない

<テスト用のオブジェクトをサブカメラ前に配置>
空のオブジェクトで[HouseInterior]を作成
Pos X:100 Y:0 Z:0
※サブカメラと座標を同位置にする

その子として空のオブジェクトで[UniHouse]と
[Guild]を作成
それぞれの子として、さらに適当にオブジェクト設置

[HouseInterior]に、新規Scriptで
[HouseInteriorMng.cs]を作成してアタッチする。

<HouseInteriorMng.cs>
SetHouseVisible関数で、
自分の子の名前と、関数の引数名と一致しているものはActiveをtrueに、それ以外はfalseになるようにする
→for文で子オブジェクトの名前を取得していき、
　一致しない家はSetActiveをfalseにする

あとはこの関数をInHouseCheck側から呼び出す。

<InHouseCheck.cs>
HouseInteriorMng.csをprivate変数で取得する。

Start関数でFindした後OnCollisionEnterで、
interiorMng_.SetHouseVisible(this.gameObject.name);
と記述する。

これでテストした結果、うまくSetActiveが動いているのを確認できた。
これをUniちゃんの家以外は、Townシーンで行う
必要がある。

<Townシーンでの変更点>
①Restaurantの子のBoxColliderという名前の
　オブジェクトを[Restaurant]に変更する
　→名前変更した場所に[InHouseCheck.cs]をつける

②BookStoreの子のBoxColliderという名前の
　オブジェクトを[BookStore]に変更する
　→名前変更した場所に[InHouseCheck.cs]をつける

③Guildの子にCubeを作成して[Guild]と名前をつける
　→つけたCubeに[InHouseCheck.cs]をつける
Pos X:-1.4 Y:-1.0 Z:0

④ItemStoreの子にCubeを作成して[ItemStore]と
  名前をつける
　→つけたCubeに[InHouseCheck.cs]をつける
Pos    X:1.5 Y:0  Z:3
Scale: X:4   Y:4  Z:4

⑤SomeColliderにある[MayorHouseCollider]という
　名前のオブジェクトを[MayorHouse]に変更する
　→名前変更した場所に[InHouseCheck.cs]をつける

⑥SomeColliderのCollider6のScale:Zを20→25にする

※SetActive側は、オブジェクトの親名をそれぞれの
　家と同じ名前にしないといけない
------------------------------------------------

<Uniの家の内装を作成する>-----------------------
DarkFantasyKiy[Free]から部屋の全てをInHouseの
シーンにもってきて、サブカメラの前に配置する

[HouseInterior]の子の[UniHouse]の子として
ヒエラルキーに置く。

[UniHouse]
Pos  X:0 Y:-1.5 Z:5
Rota X:0 Y:-90  Z:0

<壁と天井のマテリアルを変更する>
新規で[UniHouseRoof]というマテリアルを作成

[UniHouseRoof.mat]
Shader     → Standard
色         → R:0.36 G:0.15 B:0.1
Metalic    → 0.4
Smoothness → 0
NormalMap  → Assets/Furniture/RunemarkStudio/
              DarkFantasyKit[Free]/Meshes/
              Steps,Floor,Celling/Materials/
              Dfk_ceiling_wood_normal

※このマテリアルを[CEILING]と[WALLS]につける

<床のマテリアルを変更する>
新規で[UniHouseFloor]というマテリアルを作成

[UniHouseFloor.mat]
Shader     → Standard
Albedo→Assets/Furniture/PollyPrivateers/
        SeamlessMaterials/Roof/Roof_Albedo.tga

Metalic    → 0.3
Smoothness → 0.5

Normal→Assets/Furniture/PollyPrivateers/
  Map   SeamlessMaterials/Roof/Roof_Normal.tga
   
<机の上に本を設置する>
Assets/Furniture/Books/Prefabsにある
Bookを3冊配置する。

上の方の棚にはAssts/Furniture/QA_Books/Prefabsに
あるBooks_15を設置する

<棚を設置する>
Assets/Furniture/InteriorAsset/Prefabにある
Sehlfを配置する。
※Prefabは後で削除する
棚の中身は頑張る

棚の上に、地球儀でも置いとくか
※地球儀の色はすこし変更している

<植物を吊るす>
なんか、おしゃれな家って植物吊るしてるよね
がんばってつくってみた

<窓をつける>
そういえば窓がない…
PollyPrivattersにある窓をはめ込んでみる
テクスチャは棚と同じやつにする

<その他>
右の壁がさみしいからInteriorAssetの絵画を配置
PollyPrivattersにある大き目の観葉植物を右側に置く
何か天井もさみしいからボックスで囲んでみる
[UniHouseCeiling]という新規マテリアルを追加
→UniHouseFloorの色を変えただけのやつ
　色 → R:0.36 G:0.15 B:0.1

<SubCameraの画角変更>
Pos  X:100  Y:0.3 Z:0
Rota X:13.5 Y:0   Z:0
※これにより、InHouseCheck.csでのSetSubCameraPos
　が変更になる。
　また、カメラのRotateの調整も必要になる。

------------------------------------------------

<家と接触時に、家に入るかを確認するテロップ表示>-

[HouseInterior]のオブジェクトの子としてCanvasを
作成する。
そのCanvasにImageとText(TMP)を3つつける。
①[HouseInfo]
  Image　　 → frame_name.png
  Text内容　→ ○○の家に入りますか？という文章
②Yes
  Image　　 → none
  Text内容　→ 選択肢の「はい」
③No
  Image　　 → none
  Text内容　→ 選択肢の「いいえ」

次に、このCanvasが家と接触したときにActiveに
なるようにする。

<HouseInteriorMng.cs>
privateでGameObject変数を作り、
Findで"Canvas"を探す。

InHouseCheck.cs側でそのFindしたオブジェクトの
アクティブ状態を切り替えるようにする。
→[SetActiveCanvas]という関数を呼び出す

これで接触時にキャンバスが表示されるようになった

------------------------------------------------

<コルーチンを使って選択肢のキー操作を実装>-------

(仕様)
「はい」「いいえ」の選択をできるようにする
操作は矢印キーの左右、決定はスペースキーにする。

(実装方法)
<HouseInteriorMng.cs>
①SetActiveCanvas関数でコルーチンをスタートする
　→SelectInHouseというコルーチン関数を呼び出す

②SelectInHouse関数ではwhile文を回す
　flagがtrueである間は1フレーム毎に処理が
　呼ばれる仕組みにする
　スペースキー押下でflagをfalseにするとwhileを
　抜けられる(ストップ処理がいらなくなる)
※参考サイト
https://qiita.com/kwst/items/ce04abce7c1e2c72e023

これでキー押下での操作ができるようになった。
次はこのキー押下時の処理を書いていく。

private変数でboolのinHouseFlg_というのを作成し、
キー操作でtrue/falseが変わるようにする。

・trueでスペースキー→cameraMng_からサブカメラの
　切替処理を呼びだす

・falseでスペースキー→SetActiveCanvas関数を
　呼び出して、flagの引数をfalseにする
　※これでキャンバスを非表示に切り替える

このキー処理を作成するにあたって、いままで
InHouseCheck.csでcameraMng_処理をしていたものを
HouseInteriorMng.csに移植することになった。
(むしろこのほうが処理がきれいに書けた)

※SetActiveCanvasをfalseにするとき
　引数でnameがあるが、そこは[""]にし、
　関数内で[""]だったときはコルーチンスタート処理
　をしないように、キャンバスだけ非表示にして
　returnするようにした

------------------------------------------------

<建物接触時のキャンバス表示中はキャラ移動停止>---

UniのUnitychanControllerのenableをfalseにする。

HouseInteriorMng.csでfindでUnitychanControllerを
取得し、必要なところでenabledをfalseにする。

また、enabledをした際にアニメーションを止める
必要があるため、UnitychanController側にStopUniRunAnimという関数をつくり、
外部からアニメーションを止められるようにしておく

→これでWarpField.csからもアニメーションが止められるようになったから、一部書き換えました。

playerController_.StopUniRunAnim();
というのを適切な箇所で呼び出せば終了。

-----------------------------------------------

Updateとコルーチンの違い↓
https://zenn.dev/torisoup/articles/coroutine_01

基本的なコルーチンの使い方↓
https://qiita.com/kwst/items/ce04abce7c1e2c72e023

<Directional Lightの設定を変更>
Intensity    → 1.2
影のStrength → 0.6

最後にPrefab類やSceneは全て削除すること
テクスチャのサイズ調整も行うこと

